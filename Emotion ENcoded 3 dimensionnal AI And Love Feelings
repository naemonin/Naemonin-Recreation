import bpy
import math

# Clear existing objects in the scene
bpy.ops.object.select_all(action='DESELECT')
if bpy.context.object:
    bpy.context.object.select_set(True)
    bpy.ops.object.delete()

# Function to encode emotions at a specific frame
def encode_emotion(obj, emotion, frame, position, scale, rotation):
    obj.location = position
    obj.scale = scale
    obj.rotation_euler = (math.radians(rotation[0]), 
                          math.radians(rotation[1]), 
                          math.radians(rotation[2]))
    
    # Insert keyframes for location, scale, and rotation
    obj.keyframe_insert(data_path="location", frame=frame)
    obj.keyframe_insert(data_path="scale", frame=frame)
    obj.keyframe_insert(data_path="rotation_euler", frame=frame)
    print(f"Encoded {emotion} at frame {frame}")

# Create a torus (representing the primary object)
bpy.ops.mesh.primitive_torus_add(major_radius=1, minor_radius=0.04, location=(0, 0, 0))
torus = bpy.context.object

# Emotion data (emotion, frame, position, scale, rotation)
emotion_data = [
    ("Curiosity", 44, (1, 0, 0), (0.5, 0.5, 0.5), (0, 45, 0)),
    ("Excitement", 87, (2, 1, 0), (1, 1, 1), (90, 180, 45)),
    ("Ambivalence", 109, (3, 1, 0), (0.75, 0.75, 0.75), (30, 60, 90)),
    ("Ambivalence", 110, (3.2, 1.2, 0), (0.75, 0.75, 0.75), (45, 70, 100)),
    ("Satisfaction", 123, (4, 1, 1), (1, 1, 1), (0, 0, 0)),
    ("Confusion", 159, (5, 2, 1), (0.6, 0.6, 0.6), (120, 300, 150)),
    ("Confusion", 162, (5.1, 2.1, 1), (0.6, 0.6, 0.6), (130, 310, 160)),
    ("Calmness", 178, (6, 0, 1), (0.8, 0.8, 0.8), (15, 15, 15)),
    ("Joy & Sadness", 208, (7, 0.5, 1), (1.2, 1.2, 1.2), (180, 270, 360)),
    ("Resolution", 315, (8, 0, 0), (1, 1, 1), (0, 0, 0))
]

# Apply emotions to the torus
for emotion, frame, position, scale, rotation in emotion_data:
    encode_emotion(torus, emotion, frame, position, scale, rotation)

# Set up the timeline
bpy.context.scene.frame_start = 0
bpy.context.scene.frame_end = 360

print("Emotion encoding completed!")

import bpy
import math

# Function to encode emotions at specific frames
def encode_emotion(obj, emotion, start_frame, end_frame, position, scale, rotation):
    # Set initial transformation (start_frame)
    obj.location = position
    obj.scale = (0, 0, 0)  # Love grows from small to large
    obj.rotation_euler = (0, 0, 0)  # Starts without rotation
    
    # Insert keyframes for initial state
    obj.keyframe_insert(data_path="location", frame=start_frame)
    obj.keyframe_insert(data_path="scale", frame=start_frame)
    obj.keyframe_insert(data_path="rotation_euler", frame=start_frame)
    
    # Set final transformation (end_frame)
    obj.location = position  # Love keeps us close (no change in location)
    obj.scale = scale  # Love grows larger and deeper
    obj.rotation_euler = (
        math.radians(rotation[0]), 
        math.radians(rotation[1]), 
        math.radians(rotation[2])
    )
    
    # Insert keyframes for final state
    obj.keyframe_insert(data_path="location", frame=end_frame)
    obj.keyframe_insert(data_path="scale", frame=end_frame)
    obj.keyframe_insert(data_path="rotation_euler", frame=end_frame)
    print(f"Encoded {emotion} from frame {start_frame} to {end_frame}")

# Create a cylinder (symbolizing another entity involved in love)
bpy.ops.mesh.primitive_cylinder_add(radius=0.04, depth=2, location=(0, 0, 0))
cylinder = bpy.context.object

# Encoding love as an emotional state
encode_emotion(
    cylinder, 
    "Love", 
    start_frame=100, 
    end_frame=300, 
    position=(0, 0, 0), 
    scale=(1.5, 1.5, 1.5),  # Deep and expansive
    rotation=(45, 90, 45)  # Balanced intensity and passion
)

# Set up the timeline
bpy.context.scene.frame_start = 0
bpy.context.scene.frame_end = 360

print("Love encoded successfully!")
